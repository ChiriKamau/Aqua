#include <M5Stack.h>
#include <TinyGSM.h>
#include <ArduinoHttpClient.h>
#include <ArduinoJson.h>

const char* apn = "Saf-apn";
const char* gprsUser = "safaricom";
const char* gprsPass = "saf";

const char* serverUrl = "http://your-server.com:5000/data";
const int serverPort = 5000;

const int FLOW_SENSOR_PIN = 35;
#define RX_PIN 16
#define TX_PIN 17

float totalVolume = 0.0;    
float flowRate = 0.0;       
float monthlyCost = 0.0;    
int valveOpenPercent = 100; 

bool isGsmConnected = false;
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 5000;

TinyGsm modem(Serial2);
TinyGsmClient client(modem);
HttpClient http(client, serverUrl, serverPort);

void drawValveBar(int percent) {
    int barWidth = 140;
    int barHeight = 15;
    int startX = 170;
    int startY = 210;
    
    M5.Lcd.drawRect(startX, startY, barWidth, barHeight, WHITE);
    int fillWidth = (percent * (barWidth - 2)) / 100;
    M5.Lcd.fillRect(startX + 1, startY + 1, barWidth - 2, barHeight - 2, BLACK);
    M5.Lcd.fillRect(startX + 1, startY + 1, fillWidth, barHeight - 2, ORANGE);
}

void updateDisplay() {
    M5.Lcd.fillRect(0,30,164,104,BLACK);
    M5.Lcd.fillRect(166,30,164,104,BLACK);
    M5.Lcd.fillRect(0,136,164,104,BLACK);
    M5.Lcd.fillRect(166,136,164,104,BLACK);
    
    M5.Lcd.setCursor(5, 40);
    M5.Lcd.setTextColor(RED);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("Volume");
    M5.Lcd.setCursor(20,80);
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.setTextSize(4);
    M5.Lcd.printf("%.1f", totalVolume);
    M5.Lcd.setCursor(120,80);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("L");
    
    M5.Lcd.setCursor(170,40);
    M5.Lcd.setTextColor(YELLOW);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("FLOW");
    M5.Lcd.setCursor(180,80);
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.setTextSize(4);
    M5.Lcd.printf("%.1f", flowRate);
    M5.Lcd.setCursor(270,80);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("L/m");
    
    M5.Lcd.setCursor(5,137);
    M5.Lcd.setTextColor(BLUE);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("Cost");
    M5.Lcd.setCursor(20,180);
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.setTextSize(4);
    M5.Lcd.printf("%.2f", monthlyCost);
    M5.Lcd.setCursor(120,180);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("$");
    
    M5.Lcd.setCursor(170,137);
    M5.Lcd.setTextColor(ORANGE);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("Valve");
    M5.Lcd.setCursor(180,180);
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.setTextSize(4);
    M5.Lcd.print(valveOpenPercent);
    M5.Lcd.setCursor(270,180);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("%");
    
    drawValveBar(valveOpenPercent);
}

void setupGSM() {
    Serial2.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
    
    M5.Lcd.setCursor(0, 0);
    M5.Lcd.print("Initializing GSM...");
    
    if (!modem.restart()) {
        M5.Lcd.println("GSM Init Failed!");
        return;
    }
    
    M5.Lcd.print("Connecting to network...");
    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
        M5.Lcd.println("GPRS Connection Failed!");
        return;
    }
    
    isGsmConnected = true;
    M5.Lcd.println("\nConnected to GSM!");
    delay(2000);
}

void sendDataToPi() {
    if (!isGsmConnected) {
        return;
    }

    StaticJsonDocument<200> doc;
    doc["total_volume"] = totalVolume;
    doc["flow_rate"] = flowRate;
    doc["monthly_cost"] = monthlyCost;
    doc["valve_percent"] = valveOpenPercent;

    String jsonString;
    serializeJson(doc, jsonString);

    http.beginRequest();
    http.post("/data");
    http.sendHeader("Content-Type", "application/json");
    http.sendHeader("Content-Length", jsonString.length());
    http.beginBody();
    http.print(jsonString);
    
    int httpResponseCode = http.responseStatusCode();
    
    if (httpResponseCode > 0) {
        String response = http.responseBody();
        StaticJsonDocument<200> respDoc;
        deserializeJson(respDoc, response);
        
        if (respDoc.containsKey("set_valve")) {
            valveOpenPercent = respDoc["set_valve"].as<int>();
            valveOpenPercent = constrain(valveOpenPercent, 0, 100);
        }
        
        M5.Lcd.fillCircle(300, 15, 5, GREEN);
    } else {
        M5.Lcd.fillCircle(300, 15, 5, RED);
    }
}

void setup() {
    M5.begin();
    M5.Power.begin();
    
    pinMode(FLOW_SENSOR_PIN, INPUT);
    
    M5.Lcd.fillScreen(BLACK);
    M5.Lcd.setCursor(90, 0);
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.setTextSize(3);
    M5.Lcd.println("WATER METER");
    
    M5.Lcd.drawLine(0, 135, 360, 135, WHITE);
    M5.Lcd.drawLine(165, 30, 165, 240, WHITE);
    M5.Lcd.drawLine(0, 30, 360, 30, WHITE);
    
    setupGSM();
}

void loop() {
    flowRate = analogRead(FLOW_SENSOR_PIN);
    
    valveOpenPercent = map(flowRate, 0, 4095, 0, 100);
    valveOpenPercent = constrain(valveOpenPercent, 0, 100);
    
    totalVolume += (flowRate / 60.0);
    
    monthlyCost = totalVolume * 0.5;
    
    updateDisplay();
    
    unsigned long currentTime = millis();
    if (currentTime - lastSendTime >= sendInterval) {
        sendDataToPi();
        lastSendTime = currentTime;
    }
    
    delay(1000);
}
